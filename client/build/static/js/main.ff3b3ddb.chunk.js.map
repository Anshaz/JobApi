{"version":3,"sources":["job.js","jobModal.js","jobs.js","App.js","serviceWorker.js","index.js"],"names":["Job","job","onClick","Paper","className","Typography","variant","title","company","location","created_at","split","slice","join","Transition","React","forwardRef","props","ref","Slide","direction","JobModal","open","handleClose","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","id","src","company_logo","DialogContent","DialogContentText","dangerouslySetInnerHTML","__html","description","DialogActions","Button","color","href","url","target","Jobs","jobs","useState","setOpen","selectedJob","selectJob","numJobs","length","numPages","Math","ceil","activeStep","setActiveStep","jobsOnPage","console","log","component","map","i","key","MobileStepper","steps","position","nextButton","size","prevActiveStep","disabled","backButton","updateCb","a","fetch","res","json","App","jobList","updateJobs","useEffect","fetchJobs","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ff3b3ddb.chunk.js","sourcesContent":["import React from 'react';\nimport { Typography } from '@material-ui/core';\r\nimport { Paper } from '@material-ui/core';\n\n\nexport default function Job({job, onClick}) {\n    return (\n  \n        <Paper onClick={onClick} className=\"job\">\n            <div>\n           <Typography variant='h6'>{job.title} </Typography>\n           <Typography variant='h5'>{job.company} </Typography>\n           <Typography variant='h6'>{job.location} </Typography>\n            </div>\n\n            <div>\n                <Typography>{job.created_at.split(' ').slice(0,4).join (' ')}</Typography>\n                </div>\n\n        </Paper>\n    )\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function JobModal({ job, open, handleClose }) {\r\n\r\n    if (!job.title) {\r\n    \r\n        return <div></div>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title\"\r\n                aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title\">\r\n                    {job.title} -\r\n                    {job.company}\r\n                    <img className={'detail-logo'} src={job.company_logo}/>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText\r\n                        id=\"alert-dialog-slide-description\"\r\n                        dangerouslySetInnerHTML={{ __html: job.description }}\r\n                    >\r\n                    \r\n          </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Close\r\n                     </Button>\r\n                    <a href={job.url} target=\"_blank\">\r\n                    <Button color=\"primary\">\r\n                            Apply\r\n          </Button>\r\n                        </a>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Job from './job';\r\nimport MobileStepper from '@material-ui/core/MobileStepper';\r\nimport Button from '@material-ui/core/Button';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport JobModal from './jobModal';\r\n\r\nexport default function Jobs({ jobs }) {\r\n\r\n\r\n    //Modal\r\n    const [open, setOpen] = React.useState(false);\r\n    const [selectedJob, selectJob] = React.useState({});\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    //Pagination\r\n    const numJobs = jobs.length;\r\n    const numPages = Math.ceil(numJobs / 30);\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const jobsOnPage = jobs.slice(activeStep * 30, (activeStep * 30) + 30);\r\n\r\n    const handleNext = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    };\r\n\r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n\r\n    console.log('Job is', jobs[0]);\r\n\r\n    return (\r\n        <div className=\"jobs\">\r\n            <JobModal open={open} job={selectedJob} handleClose={handleClose}/>\r\n            <Typography variant=\"h4\" component = \"h1\">\r\n                Jobify\r\n             </Typography>\r\n            <Typography variant=\"h6\" component=\"h2\">\r\n                Found {numJobs} Jobs\r\n                </Typography>\r\n            {\r\n                jobsOnPage.map(\r\n                    (job, i) => <Job key={i} job={job} onClick={() => {\r\n                        handleClickOpen();\r\n                        selectJob(job)\r\n                    }} />\r\n                )\r\n\r\n            }\r\n\r\n            <div>\r\n                Page {activeStep+1} of {numPages}\r\n                </div>\r\n\r\n            <MobileStepper\r\n                variant=\"progress\"\r\n                steps={numPages}\r\n                position=\"static\"\r\n                activeStep={activeStep}\r\n                nextButton={\r\n                    <Button size=\"small\" onClick={handleNext} disabled={activeStep === 5}>\r\n                        Next\r\n                            <KeyboardArrowRight />\r\n                    </Button>\r\n                }\r\n                backButton={\r\n                    <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\r\n                        <KeyboardArrowLeft />\r\n                     Back\r\n                    </Button>\r\n                }\r\n            />\r\n\r\n            </div>\r\n        \r\n        );\r\n\r\n}","import React from 'react';\nimport './App.css';\nimport Jobs from './jobs';\n//import home from './home';\n\nconst JOB_API_URL = 'http://localhost:3001/jobs';\n\n\n\nasync function fetchJobs(updateCb) {\n\n    const res = await fetch(JOB_API_URL);\n    const json = await res.json();\n\n    updateCb(json);\n\n    console.log({ json });\n\n}\n\n\nfunction App() {\n\n    const [jobList, updateJobs] = React.useState([]);\n\n    React.useEffect(() => {\n\n        fetchJobs(updateJobs);\n\n    }, [])\n\n  return (\n    <div className=\"App\">\n\n          <Jobs jobs={jobList}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}